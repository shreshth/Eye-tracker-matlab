function plotPCVariance(S,showPlot,savePlot,noEEyes)

% *************************************************************************
% SUMMARY      : Function to plot variance produced by the eigenvectors
%
% USAGE        : plotPCVariance(S,showPlot,savePlot,fracTrainImg,noEEyes)
%               invoke only in DEBUG mode
%
% ARGUMENTS    :
% 
% S            - The weight matrix obtained from SVD
% showPlot     - Display the plots generated by this function
% savePlot     - Save the plots generated by this function
% noEEyes      - No. of eigenEyes to plot
%
% *************************************************************************

cumValues    = zeros(1,size(S,1)-3);
cumValues(1) = S(1,1);
cumSum       = S(1,1);

for i = 2:length(cumValues)                        % Cummulative sum of PCs
    cumValues(i) = cumValues(i-1) + S(i,i);
    cumSum       = cumSum + S(i,i);
end

cumValues = cumValues/cumSum;

% ----------------------------------------------------------- Print results
fprintf('----------------------------------------------------\n');
fprintf('Variance in principal components\n');
fprintf('----------------------------------------------------\n');
fprintf('Percentage variance in 10 PCs            : %1.2f %%\n', cumValues(10)*100);
fprintf('Percentage variance in 25 PCs            : %1.2f %%\n', cumValues(25)*100);
fprintf('Percentage variance in %d PCs            : %1.2f %%\n', noEEyes,cumValues(noEEyes)*100);
fprintf('Percentage variance in %d PCs           : %1.2f %%\n', ...
         size(S,2),cumValues(end)*100);

if showPlot
    h1 = plot(cumValues);
    set(gcf, 'Name', 'Eigenvalue Variance');

    % ---------------------------------------------------------------------
    % Plot styles
    % ---------------------------------------------------------------------

    xlabel('Number of Principal Components','FontSize', 24)
    ylabel('EigenValue Variance', 'FontSize', 24, 'Rotation', 90 ); 

    set(h1, 'LineStyle', '-', 'LineWidth', 3.0, 'Color',[0,0,0]);
    set(h1, 'Marker', 'none', 'MarkerFaceColor', [0,0,0]);
    set(h1, 'MarkerEdgeColor', [0,0,0], 'MarkerSize', 8.0); 

    % ----------------------------------------------------- Axis properties

    grid off;
    axis([0 120 0 1]);

    fh = figure(1);             % returns the handle to the figure object 
    set(fh, 'color', 'white');  % sets the background color to white 

    fh = figure(1);             % returns the handle to the figure object 
    set(fh, 'color', 'white');  % sets the background color to white 
    set(gca, 'Linewidth', 1);
    set(gca, 'FontSize', 24);

    set(gca, 'TickDir', 'in', 'XTick', 0:20:120, 'YTick', 0:0.2:1);

    % --------------------------------------------------- Legend properties

    h_legend = legend(sprintf('# training images %d',size(S,1)));

    set(h_legend,'FontSize',20,'Location', 'SouthEast');
    legend boxoff;

    % ----------------------------------------------------- Reposition plot

    set(gcf,'paperUnits','centimeters')
    xSize = 14; ySize = 8;
    xLeft = (21-xSize)/2; yTop = (30-ySize)/2;

    set(gcf,'PaperPosition',[xLeft yTop xSize ySize]);
    set(gcf,'Position',[900 500 xSize*50 ySize*50]);

    if savePlot
        set(gcf,'PaperPositionMode','auto');
        saveas(fh,strcat('results/fig/eigenValueVariance.fig'));
        saveas(fh, 'results/eps/eigenValueVariance', 'epsc'); 
        saveas(fh,strcat('results/png/eigenValueVariance.png'));
        saveas(fh,strcat('results/pdf/eigenValueVariance.pdf'));
    end
end